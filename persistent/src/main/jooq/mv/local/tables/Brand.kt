/*
 * This file is generated by jOOQ.
 */
package mv.local.tables


import java.util.function.Function

import kotlin.collections.List

import mv.local.Cars
import mv.local.keys.BRAND__BRAND_CAR_CARDS_ID_FKEY
import mv.local.tables.records.BrandRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Brand(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BrandRecord>?,
    aliased: Table<BrandRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BrandRecord>(
    alias,
    Cars.CARS,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>cars.brand</code>
         */
        val BRAND: Brand = Brand()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BrandRecord> = BrandRecord::class.java

    /**
     * The column <code>cars.brand.car_cards_id</code>.
     */
    val CAR_CARDS_ID: TableField<BrandRecord, Long?> = createField(DSL.name("car_cards_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>cars.brand.car_name</code>.
     */
    val CAR_NAME: TableField<BrandRecord, String?> = createField(DSL.name("car_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>cars.brand.link</code>.
     */
    val LINK: TableField<BrandRecord, String?> = createField(DSL.name("link"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BrandRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BrandRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>cars.brand</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>cars.brand</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>cars.brand</code> table reference
     */
    constructor(): this(DSL.name("brand"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BrandRecord>): this(Internal.createPathAlias(child, key), child, key, BRAND, null)
    override fun getSchema(): Schema? = if (aliased()) null else Cars.CARS
    override fun getReferences(): List<ForeignKey<BrandRecord, *>> = listOf(BRAND__BRAND_CAR_CARDS_ID_FKEY)

    private lateinit var _carCards: CarCards

    /**
     * Get the implicit join path to the <code>cars.car_cards</code> table.
     */
    fun carCards(): CarCards {
        if (!this::_carCards.isInitialized)
            _carCards = CarCards(this, BRAND__BRAND_CAR_CARDS_ID_FKEY)

        return _carCards;
    }

    val carCards: CarCards
        get(): CarCards = carCards()
    override fun `as`(alias: String): Brand = Brand(DSL.name(alias), this)
    override fun `as`(alias: Name): Brand = Brand(alias, this)
    override fun `as`(alias: Table<*>): Brand = Brand(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Brand = Brand(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Brand = Brand(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Brand = Brand(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, String?, String?> = super.fieldsRow() as Row3<Long?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
