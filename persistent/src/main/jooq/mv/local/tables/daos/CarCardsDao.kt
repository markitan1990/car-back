/*
 * This file is generated by jOOQ.
 */
package mv.local.tables.daos


import kotlin.collections.List

import mv.local.tables.CarCards
import mv.local.tables.records.CarCardsRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class CarCardsDao(configuration: Configuration?) : DAOImpl<CarCardsRecord, mv.local.tables.pojos.CarCards, Long>(CarCards.CAR_CARDS, mv.local.tables.pojos.CarCards::class.java, configuration) {

    /**
     * Create a new CarCardsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: mv.local.tables.pojos.CarCards): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): mv.local.tables.pojos.CarCards? = fetchOne(CarCards.CAR_CARDS.ID, value)

    /**
     * Fetch records that have <code>owner BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOwner(lowerInclusive: String?, upperInclusive: String?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.OWNER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>owner IN (values)</code>
     */
    fun fetchByOwner(vararg values: String): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.OWNER, *values)

    /**
     * Fetch records that have <code>car_mileage BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCarMileage(lowerInclusive: Int?, upperInclusive: Int?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.CAR_MILEAGE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>car_mileage IN (values)</code>
     */
    fun fetchByCarMileage(vararg values: Int): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.CAR_MILEAGE, *values.toTypedArray())

    /**
     * Fetch records that have <code>car_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCarYear(lowerInclusive: Int?, upperInclusive: Int?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.CAR_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>car_year IN (values)</code>
     */
    fun fetchByCarYear(vararg values: Int): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.CAR_YEAR, *values.toTypedArray())

    /**
     * Fetch records that have <code>cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCost(lowerInclusive: Int?, upperInclusive: Int?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.COST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cost IN (values)</code>
     */
    fun fetchByCost(vararg values: Int): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.COST, *values.toTypedArray())

    /**
     * Fetch records that have <code>car_condition BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCarCondition(lowerInclusive: String?, upperInclusive: String?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.CAR_CONDITION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>car_condition IN (values)</code>
     */
    fun fetchByCarCondition(vararg values: String): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.CAR_CONDITION, *values)

    /**
     * Fetch records that have <code>car_engine BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCarEngine(lowerInclusive: Double?, upperInclusive: Double?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.CAR_ENGINE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>car_engine IN (values)</code>
     */
    fun fetchByCarEngine(vararg values: Double): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.CAR_ENGINE, *values.toTypedArray())

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>transmission BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTransmission(lowerInclusive: String?, upperInclusive: String?): List<mv.local.tables.pojos.CarCards> = fetchRange(CarCards.CAR_CARDS.TRANSMISSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>transmission IN (values)</code>
     */
    fun fetchByTransmission(vararg values: String): List<mv.local.tables.pojos.CarCards> = fetch(CarCards.CAR_CARDS.TRANSMISSION, *values)
}
