/*
 * This file is generated by jOOQ.
 */
package mv.local.tables.records


import mv.local.tables.CarImages

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CarImagesRecord() : UpdatableRecordImpl<CarImagesRecord>(CarImages.CAR_IMAGES), Record3<Long?, Int?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var carCardsId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var link: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Int?, String?> = super.fieldsRow() as Row3<Long?, Int?, String?>
    override fun valuesRow(): Row3<Long?, Int?, String?> = super.valuesRow() as Row3<Long?, Int?, String?>
    override fun field1(): Field<Long?> = CarImages.CAR_IMAGES.ID
    override fun field2(): Field<Int?> = CarImages.CAR_IMAGES.CAR_CARDS_ID
    override fun field3(): Field<String?> = CarImages.CAR_IMAGES.LINK
    override fun component1(): Long? = id
    override fun component2(): Int? = carCardsId
    override fun component3(): String? = link
    override fun value1(): Long? = id
    override fun value2(): Int? = carCardsId
    override fun value3(): String? = link

    override fun value1(value: Long?): CarImagesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): CarImagesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): CarImagesRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Long?, value2: Int?, value3: String?): CarImagesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised CarImagesRecord
     */
    constructor(id: Long? = null, carCardsId: Int? = null, link: String? = null): this() {
        this.id = id
        this.carCardsId = carCardsId
        this.link = link
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised CarImagesRecord
     */
    constructor(value: mv.local.tables.pojos.CarImages?): this() {
        if (value != null) {
            this.id = value.id
            this.carCardsId = value.carCardsId
            this.link = value.link
            resetChangedOnNotNull()
        }
    }
}
