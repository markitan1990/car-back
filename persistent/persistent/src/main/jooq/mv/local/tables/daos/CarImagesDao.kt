/*
 * This file is generated by jOOQ.
 */
package mv.local.tables.daos


import kotlin.collections.List

import mv.local.tables.CarImages
import mv.local.tables.records.CarImagesRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class CarImagesDao(configuration: Configuration?) : DAOImpl<CarImagesRecord, mv.local.tables.pojos.CarImages, Long>(CarImages.CAR_IMAGES, mv.local.tables.pojos.CarImages::class.java, configuration) {

    /**
     * Create a new CarImagesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: mv.local.tables.pojos.CarImages): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<mv.local.tables.pojos.CarImages> = fetchRange(CarImages.CAR_IMAGES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<mv.local.tables.pojos.CarImages> = fetch(CarImages.CAR_IMAGES.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): mv.local.tables.pojos.CarImages? = fetchOne(CarImages.CAR_IMAGES.ID, value)

    /**
     * Fetch records that have <code>car_cards_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCarCardsId(lowerInclusive: Int?, upperInclusive: Int?): List<mv.local.tables.pojos.CarImages> = fetchRange(CarImages.CAR_IMAGES.CAR_CARDS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>car_cards_id IN (values)</code>
     */
    fun fetchByCarCardsId(vararg values: Int): List<mv.local.tables.pojos.CarImages> = fetch(CarImages.CAR_IMAGES.CAR_CARDS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>link BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLink(lowerInclusive: String?, upperInclusive: String?): List<mv.local.tables.pojos.CarImages> = fetchRange(CarImages.CAR_IMAGES.LINK, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>link IN (values)</code>
     */
    fun fetchByLink(vararg values: String): List<mv.local.tables.pojos.CarImages> = fetch(CarImages.CAR_IMAGES.LINK, *values)
}
